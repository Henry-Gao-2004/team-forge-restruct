generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Entry {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  skills            Skills[]
  interests         String[]
  availability      String[]
  relation          String[]
  password          String
  email             String             @unique
  name              String
  title             String?
  groupID           String?
  ClassPreferences  ClassPreferences[]
  group             Group?             @relation(fields: [groupID], references: [groupID])
  receivedMessages  Message[]          @relation("RecipientMessages")
  sentMessages      Message[]          @relation("SenderMessages")
  Project           Project[]
  staticPreferences StaticPreferences?
  classes           Class[]            @relation("EntryClasses")
}

model Message {
  id            String   @id @default(uuid())
  senderEmail   String
  recipientEmail String
  content       String
  createdAt     DateTime @default(now())

  sender        Entry    @relation("SenderMessages", fields: [senderEmail], references: [email])
  recipient     Entry    @relation("RecipientMessages", fields: [recipientEmail], references: [email])

  @@index([senderEmail])
  @@index([recipientEmail])
}

model Class {
  classID          String             @id @default(uuid())
  title            String
  subtitle         String
  ClassPreferences ClassPreferences[]
  projects         Project[]
  members          Entry[]            @relation("EntryClasses")
}

model Project {
  projectID   String  @id @default(uuid())
  title       String
  description String
  groupID     String?
  classID     String
  ownerEmail  String
  class       Class   @relation(fields: [classID], references: [classID])
  group       Group?  @relation(fields: [groupID], references: [groupID], onDelete: Cascade)
  Entry       Entry   @relation(fields: [ownerEmail], references: [email])
}

model Group {
  groupID      String    @id @unique @default(uuid())
  meetingTimes String[]
  name         String
  members      Entry[]
  Project      Project[]
}

model Preferences {
  id       String @id @default(uuid())
  groupID  String @unique
  interest Int
  skill    Int
}

model StaticPreferences {
  id             String   @id @default(uuid())
  userId         String   @unique
  selectedSkills String[]
  availability   Json
  user           Entry    @relation(fields: [userId], references: [id])
}

model ClassPreferences {
  id                    String   @id @default(uuid())
  userID                String
  classID               String
  preferredSkills       String[]
  preferredSkillsWeight Int
  interests             String[]
  interestsWeight       Int
  Class                 Class    @relation(fields: [classID], references: [classID])
  Entry                 Entry    @relation(fields: [userID], references: [id])

  @@unique([userID, classID])
}

enum Skills {
  Java
  Python
  C
}
