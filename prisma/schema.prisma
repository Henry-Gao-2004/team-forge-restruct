generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Entry {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  skills            Skills[]
  interests         String[]
  availability      String[]
  relation          String[] //id of students the user wants to work with.
  password          String
  email             String             @unique
  name              String
  title             String?
  groupID           String? // Foreign key to Group model
  group             Group?             @relation(fields: [groupID], references: [groupID])
  classes           Class[]            @relation("EntryClasses") //id of classes the user is in.
  staticPreferences StaticPreferences?
  classPreferences  ClassPreferences[]
  Projects           Project[]

  sentMessages     Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("RecipientMessages")
}

enum Skills {
  Java
  Python
  C
}

model Message {
  id            String   @id @default(uuid())
  senderEmail   String
  recipientEmail String
  content       String
  createdAt     DateTime @default(now())

  sender        Entry    @relation("SenderMessages", fields: [senderEmail], references: [email])
  recipient     Entry    @relation("RecipientMessages", fields: [recipientEmail], references: [email])

  @@index([senderEmail])
  @@index([recipientEmail])
}

model Class {
  classID          String             @id @default(uuid())
  members          Entry[]            @relation("EntryClasses")
  projects         Project[] //id of projects the class contains
  title            String
  subtitle         String
  classPreferences ClassPreferences[]
}

model Project {
  projectID   String  @id @default(uuid())
  title       String
  description String
  groupID     String? // Foreign key to Group model
  group       Group?  @relation(fields: [groupID], references: [groupID], onDelete: Cascade)
  classID     String // Foreign key to Class model
  class       Class   @relation(fields: [classID], references: [classID])
  ownerEmail  String // Foreign key to Entry model
  owner       Entry   @relation(fields: [ownerEmail], references: [email])
}

model Group {
  groupID      String    @id @unique @default(uuid())
  members      Entry[]
  meetingTimes String[]
  name         String
  Project      Project[]
}

model Preferences {
  id       String @id @default(uuid())
  groupID  String @unique
  interest Int
  skill    Int
}

model StaticPreferences {
  id             String   @id @default(uuid())
  userId         String // Link to the User table, assuming it's 'Entry'
  selectedSkills String[] // Array of skills (e.g., Java, Python)
  availability   Json // Storing availability data as JSON
  user           Entry    @relation(fields: [userId], references: [id])

  @@unique([userId]) // Ensure one entry per user
}

model ClassPreferences {
  id                    String   @id @default(uuid())
  userID                String
  classID               String
  preferredSkills       String[]
  preferredSkillsWeight Int
  interests             String[]
  interestsWeight       Int
  user                  Entry    @relation(fields: [userID], references: [id])
  class                 Class    @relation(fields: [classID], references: [classID])

  @@unique([userID, classID]) // Ensure one entry per user-class combination
}