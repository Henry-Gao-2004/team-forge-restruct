generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Entry {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  skills       Skills[]
  interests    String[]
  availability String[]
  relation     String[] //id of students the user wants to work with.
  password     String
  email        String   @unique
  name         String
  title        String?
  groupID      String? // Foreign key to Group model
  group        Group?   @relation(fields: [groupID], references: [groupID])
  classes      Class[]  @relation("EntryClasses") //id of classes the user is in.
}

enum Skills {
  Java
  Python
  C
}

model Message {
  id            String   @id @default(uuid())
  senderEmail   String
  recipientEmail String
  content       String
  createdAt     DateTime @default(now())

  sender        Entry    @relation("SenderMessages", fields: [senderEmail], references: [email])
  recipient     Entry    @relation("RecipientMessages", fields: [recipientEmail], references: [email])

  @@index([senderEmail])
  @@index([recipientEmail])
}

model Class {
  classID  String    @id @default(uuid())
  members  Entry[]   @relation("EntryClasses") //connects to records in Entry
  projects Project[] //id of projects the class contains
  title    String
  subtitle String
}

model Project {
  projectID   String  @id @default(uuid())
  title       String
  description String
  groupID     String? // Foreign key to Group model
  group       Group?  @relation(fields: [groupID], references: [groupID])
  classID     String // Foreign key to Class model
  class       Class   @relation(fields: [classID], references: [classID])
}

model Group {
  groupID      String    @id @unique @default(uuid())
  meetingTimes String[]
  name         String
  members      Entry[]
  Project      Project[]
}

model Preferences {
  id       String @id @default(uuid())
  groupID  String @unique
  interest Int
  skill    Int
}

model StaticPreferences {
  id             String   @id @default(uuid())
  userId         String   @unique
  selectedSkills String[]
  availability   Json
  user           Entry    @relation(fields: [userId], references: [id])
}

model ClassPreferences {
  id                    String   @id @default(uuid())
  userID                String
  classID               String
  preferredSkills       String[]
  preferredSkillsWeight Int
  interests             String[]
  interestsWeight       Int
  Class                 Class    @relation(fields: [classID], references: [classID])
  Entry                 Entry    @relation(fields: [userID], references: [id])

  @@unique([userID, classID])
}

enum Skills {
  Java
  Python
  C
}

model StaticPreferences {
  id             String   @id @default(uuid())
  userId         String // Link to the User table, assuming it's 'Entry'
  selectedSkills String[] // Array of skills (e.g., Java, Python)
  availability   Json // Storing availability data as JSON
  user           Entry    @relation(fields: [userId], references: [id])

  @@unique([userId]) // Ensure one entry per user
}

model ClassPreferences {
  id                    String   @id @default(uuid())
  userID                String
  classID               String
  preferredSkills       String[]
  preferredSkillsWeight Int
  interests             String[]
  interestsWeight       Int
  user                  Entry    @relation(fields: [userID], references: [id])
  class                 Class    @relation(fields: [classID], references: [classID])

  @@unique([userID, classID]) // Ensure one entry per user-class combination
}